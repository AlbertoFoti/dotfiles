#pragma once
#include <string>
#include <vector>
#include <fstream>
#include <iostream>
#include "Log.hxx"
#include "type_defines.hxx"

template<typename T>
bool writeTo(const std::string& filename, std::vector<T> data) {
    // Open the file for output in text mode
    std::ofstream outfile(filename);

    // Check if the file was opened successfully
    if (outfile.is_open()) {
        // Loop through each element in the data vector
        for (const T& element : data) {
            // Write the element to the file, followed by a newline character
            outfile << element << "\n";
        }
        outfile.close();

        Log::info("RW", "Nominal trajectory written to file: %s", filename.c_str());
    } else {
        Log::err("RW", "Error opening file: %s", filename.c_str());
        return false;
    }

    return true;
};

bool writeGuidanceData(const std::string& filename, GuidanceProfileOutStr gui_profile) {
    // Open the file for output in text mode
    // std::ofstream outfile(filename);

    // // Check if the file was opened successfully
    // if (outfile.is_open()) {
    //     // Loop through each element in the data vector
    //     for (const T& element : data) {
    //         // Write the element to the file, followed by a newline character
    //         outfile << element << "\n";
    //     }
    //     outfile.close();

    //     Log::info("RW", "Nominal trajectory written to file: %s", filename.c_str());
    // } else {
    //     Log::err("RW", "Error opening file: %s", filename.c_str());
    //     return false;
    // }

    auto fp1 = fopen(filename,'w');

    fprintf(fp1,'/* File1 automatically generated by BuildGuidanceTrajectory.m */\n');
    fprintf(fp1,'/* 1 - Dimension of planned bank angle */\n');
    fprintf(fp1,'%.6g\n', length(uMuGuiRs));
    fprintf(fp1,'/* 2 - uMuGuiRs*/\n');
    fprintf(fp1,'%.6g\n', uMuGuiRs);
    fprintf(fp1,'/* 3 - muGuiRs*/\n');
    fprintf(fp1,'%.6g\n', muGuiRs);
    fprintf(fp1,'/* 4 - xCoMGuiRs*/\n');
    fprintf(fp1,'%.6g %.6g %.6g %.6g %.6g %.6g\n', xCoMGuiRs');
    fprintf(fp1,'/* 5 - gNEDGuiRs*/\n');
    fprintf(fp1,'%.6g %.6g %.6g\n', gNEDGuiRs');

    fclose(fp1);

    return true;
};